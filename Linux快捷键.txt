bash：
Ctrl+A：移动光标到行首。
Ctrl+E：移动光标到行尾。
Ctrl+L：清空屏幕，与clear类似。

Vim:
vim -r file: 恢复上次异常退出的文件

gt：在已经打开的vim上方tab窗口之间切换
:h xxx：查看帮助 ctrl+D可以补全
ctrl+]：查看帮助文档中的单词详细解释
ctrl+o：回到原帮助文档
:tabs 列出所有的tab
:tabe <filename> 在新的tab中编辑文件
ctrl+g：查看文件信息
shift+按键--对应该按键的大写模式

插入模式：
i：在光标的前边进入插入模式
I：在光标所在行的行首进入插入模式
a：在光标的后边进入插入模式
A：在光标所在行的行尾进入插入模式
o：在光标所在行的下方插入空行并进入插入模式
O：在光标所在行的上方插入空行并进入插入模式
s：删除光标指定的字符并进入插入模式
S：将光标所在行清除（不是删除）并进入插入模式

x：删除单个字符
删除更多字符可以使用d命令：d motion
（motion:表示操作范围的指令）
0：将光标定位到行首的位置--d0：删除从光标当前位置（不包含）到该行行首的所有字符
^：同上--d^：同上
$：将光标定位到行尾的位置（完事了要给钱）--d$：删除从光标当前位置（包含）到该行行尾的所有字符
b：将光标定位到光标所在单词起始处--db：删除从光标当前位置（不包含）到单词起始处的所有字符
e：将光标定位到光标所在单词结尾处--de：删除从光标当前位置（包含）到单词结尾处的所有字符
w：将光标定位到下一个单词起始处--dw：删除从光标当前位置（包含）到下个单词起始处的所有字符
h:光标向左--dh：删除光标前边一个字符
j:光标向下--dj：删除光标所在行以及下一行的所有字符
k:光标向上--dk：删除光标所在行以及上一行的所有字符
l:光标向右--dl：删除光标后边一个字符
dd：删除光标所在行的字符（并不是真的删除，可以用于粘贴）
gg：将光标定位到文件的开头--dgg：删除光标所在行到文件开头的所有字符
G：将光标定位到文件的末尾--dG：删除光标所在行到文件末尾的所有字符
行号+G：跳转到对应行
:行号 也可以跳转到对应行

数字+motion=重复多个motion
d [数字] motion=删除多个motion范围

U：取消当前行中所有的改动
u：撤销上一步的操作
Ctrl+r：恢复上一步被撤销的操作

所谓的删除操作并非真的删除，而是存放在vim的缓冲区中，相当于windows的剪切功能
p: 将最后一次删除的内容粘贴在光标之后
P: 将最后一次删除的内容粘贴在光标之前
若粘贴的以整行为单位，则p命令将在光标的下一行开始粘贴；
若粘贴的是非整行的局部字符串，则p命令将在光标后开始粘贴。

y命令用于拷贝：y [数字] motion
yy/Y: 复制整行文本

c命令用于修改：c [数字] motion 需要注意的是修改和替换不一样，替换不会进入插入模式，而修改会
与d非常类似，只不过删除之后顺便进入插入模式（光标的定位与直接删除模式后再插入有细微差别）
例如：cc：删除光标所在行的字符，并进入插入模式

1.正常模式：可以使用快捷键命令，或按:输入命令行。:n,m d(删除 n 到 m 行代码)
2.插入模式：可以输入文本，在正常模式下，按i进入插入模式。
一个小技巧：按8，再按i，进入插入模式，输入=，按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<Esc>就插入了36个+组成的分割线。
3.可视模式：正常模式下按v可以进入可视模式。在可视模式下，移动光标可以选择文本。
按V进入可视行模式，总是整行整行的选中。ctrl+v进入可视块模式。
进入该模式后，选中行/块，之后按I进入插入模式，修改单一行/块后按ESC，全部完成修改。
4.替换模式：正常模式下，按R进入，退格键取消替换（按r替换单个字符，也可以[数字]+r，重复替换若干个相同字符）

s/from/to/(s即substitude)：替换当前行的内容：
:s/from/to/：将当前行中的第一个from，替换成to。如果当前行含有多个from，则只会替换其中的第一个。
:s/from/to/g：将当前行中的所有from都替换成to。
:s/from/to/gc：将当前行中的所有from都替换成to，但是每一次替换之前都会询问请求用户确认此操作。

.s/from/to/g：替换某一行的内容：      
:.s/from/to/g：在当前行进行替换操作。
:33s/from/to/g：在第33行进行替换操作。
:$s/from/to/g：在最后一行进行替换操作。

10,20s/from/to/g：替换某些行的内容：
:10,20s/from/to/g：对第10行到第20行的内容进行替换。
:1,$s/from/to/g：对第一行到最后一行的内容进行替换(即全部文本)。
:1,.s/from/to/g：对第一行到当前行的内容进行替换。
:.,$s/from/to/g：对当前行到最后一行的内容进行替换。
:'a,'bs/from/to/g：对标记a和b之间的行(含a和b所在的行)进行替换。其中a和b是之前用m命令所做的标记。

%s/from/to/g：替换所有行的内容：      
:%s/from/to/g：对所有行的内容进行替换。
如果要替换的内容包含/ 如想要把s1/t1替换为t1 则可以指定一个新的分隔符 比如@：
:%s@s1/t1@t1@g

Enter：把光标移至下一行第一个非空白字符
+: 把光标移至下一行第一个非空白字符
-：把光标移至上一行第一个非空白字符 

:r!date：在光标处插入当前日期与时间。
n%: 到文件n%的位置
Ctrl+D：下翻半屏(down)
Ctrl+U：上翻半屏(up)
Ctrl+F：下翻一屏
Ctrl+B：上翻一屏
Ctrl+E: 向下滚动一行
Ctrl+Y: 向上滚动一行
zz：将当前行移动到屏幕中央
zt：将当前行移动到屏幕顶端
zb：将当前行移动到屏幕底端
/something: 在后面的文本中查找something
?something: 在前面的文本中查找something
n: 向后查找下一个
N: 向前查找下一个
%：能够快速定位到另一半的括号
>>：表示缩进（搭配可视模式一起缩进）
<<：表示反缩进


软件源保存地址
/etc/apt$ sudo vim sources.list

基本命令:
date：显示当前日期与时间
cal：显示当前月份的日历（默认）  cal [month] [year]
bc：显示计算器
exit：结束终端会话
clear：清空命令行
Tab按键：命令补全
who：查看目前在线设备
pwd：显示工作路径
tree：显示文件和目录的树型结构
file：显示文件类型
xx --help：列出命令的主要用法
man xx：打开命令的使用手册，获得更详细的用法
su：普通用户切换为超级用户
exit/su+用户名/Ctrl+D：超级用户切换为普通用户
lsusb：显示驱动和内部连接到系统的设备
tar -xvf filename.xxx.xxx：解压文件
type：显示命令的类型
wc：(字计数)命令，用来显示文件所包含的行数、字数和字节数
history：查看命令行历史记录
printenv：显示系统环境变量的值

touch：用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件
echo：用于字符串的输出

Ctrl+C：强制中断程序，信号最强
Ctrl+D：发送exit信号，退出当前用户或客户端
Ctrl+Z：暂停执行程序，在进程中挂起
Ctrl+Shift+C：复制
Ctrl+Shift+V：粘贴

查找命令：
find：最常见且最强大的查找命令 
find 指定目录 指定条件 指定动作
例：find . -name my*：搜索当前目录(含子目录)中，所有文件名以my开头的文件。
例：find . -name my* -ls：搜索当前目录(含子目录)中，所有文件名以my开头的文件，并显示详细信息。
(其中.表示当前目录)
locate：相当于find -name，但速度较之快很多，因为他检索数据库而不是具体目录
该数据库自动创建且每隔一天更新一次，使用locate前可以先输入updatedb手动更新一次数据库
例：locate /etc/sh：搜索etc目录下所有以sh开头的文件。
例：locate -i ~/m：搜索用户主目录下，所有以m开头的文件，并且忽略大小写。
whereis：只能用于程序名的搜索，而且只搜索二进制文件(参数-b)、man说明文件(参数-m)和源代码文件(参数-s)。
which：在PATH变量指定的路径中，搜索某个系统命令(可执行文件)的位置，并且返回第一个搜索结果。
Ctrl+R：启动增量搜索(历史命令)

|：管道命令操作符，管道符左边命令的输出就会作为管道符右边命令的输入

grep：用于查找文件中符合条件的字符串
-E：开启扩展(Extend)的正则表达式。
-i：忽略大小写(ignore case)。
-v：反过来(invert)，只打印没有匹配的，而匹配的反而不打印。
-n：显示行号
-w: 匹配单词，而不是单词的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker
-c：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，如果同时使用-cv选项是显示有多少行没有被匹配到。
-o：只显示被模式匹配到的字符串。
--color: 将匹配到的内容以颜色高亮显示。
-A n：显示匹配到的字符串所在的行及其后n行，after
-B n：显示匹配到的字符串所在的行及其前n行，before
-C n：显示匹配到的字符串所在的行及其前后各n行，context

ps -ef：用标准的格式显示系统进程，-e为显示所有进程，-f为全格式显示
ps -aux也是类似，但会截断 command 列，在命令窗口较小时无法看到，故不推荐
UID：用户ID、但输出的是用户名 
PID：进程的ID 
PPID：父进程ID 
C：进程占用CPU的百分比 
STIME：进程启动的时间 
TTY：该进程在那个终端上运行，若与终端无关，则显示?若为pts/0等，则表示由网络连接主机进程。
CMD：命令的名称和参数
例：ps -ef | grep ssh：列出ssh的进程相关信息
kill -9 PID：强制中断对应PID的进程
SIGKILL	9 Kill(can't be caught or ignored) (POSIX)(Portable Operating System Interface 可移植操作系统接口)
top -p PID: 查看进程所占用的CPU和内存

如果想查看进程的CPU占用率和内存占用率，可以使用aux 
如果想查看进程的父进程ID和完整的COMMAND命令，可以使用ef

df -h：显示文件系统磁盘使用情况统计
free -h：查看内存
相关参数：
total: 内存总数
used: 已经使用内存数
free: 完全空闲内存
shared: 多个进程共享的内存
buffers: 用于块设备数据缓冲，记录文件系统metadata(目录，权限，属性等)
cached: 用于文件内容的缓冲
available：真正剩余的可被程序应用的内存数

dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。
if=文件名：输入文件名，缺省为标准输入。即指定源文件。
of=文件名：输出文件名，缺省为标准输出。即指定目的文件。
bs=bytes：同时设置读入/输出的块大小为bytes个字节。
count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。
例：dd if=/dev/hdb of=/dev/hdd：将本地的/dev/hdb整盘备份到/dev/hdd。
例：dd if=/dev/hdb | gzip > /root/image.gz：备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径。
例：gzip -dc /root/image.gz | dd of=/dev/hdb：将压缩的备份文件恢复到指定盘。
例：增加swap分区文件大小
1.dd if=/dev/zero of=/opt/image/swapfile bs=1024 count=262144：创建一个大小为256M的文件
2.sudo mkswap /opt/image/swapfile：把这个文件变成swap文件
3.sudo swapon /opt/image/swapfile：启用这个swap文件
4./opt/image/swapfile /swap swap defaults 0 0：编辑/etc/fstab文件，使在每次开机时自动加载swap文件
其中，该命令：
第一列可以是实际分区名，也可以是实际分区的卷标(Lable)
第二列是挂载点。挂载点必须为当前已经存在的目录，为了兼容起见，最好在创建需要挂载的目标目录后，将其权限设置为777，以开放所有权限。
第三列为此分区的文件系统类型。
第四列是挂载的选项，用于设置挂载的参数。
第五列是dump备份设置。当其值设置为1时，将允许dump备份程序备份；设置为0时，忽略备份操作。
第六列是fsck磁盘检查设置。其值是一个顺序。当其值为0时，永远不检查；而/根目录分区永远都为1。其它分区从2开始，数字越小越先检查。
注意：
linux操作系统将所有的设备都看作文件，
它将整个计算机的资源都整合成一个大的文件目录。
我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，
然后通过访问这个目录来访问存储设备。

想要删除该swap分区
1.sudo swapoff -a(关闭所有的swap)
2.删除对应目录下的swap

~：用户名目录 ~/a = /home/woz1zh1/a
.：当前目录，也可以用./表示
..：上一级目录，也可以用../表示

cd：进入主目录
cd /：进入根目录
cd -：返回进入此目录之前的目录
cd ..：返回上一级目录
cd ../..：返回上两级目录
例：cd /etc/v*：忘记目录名字的切换，可以用*也可以通过Tab键补全

ls：查看目录中的文件
显示颜色的含义
白色字体：普通文件
绿色字体：可执行文件
红色字体：压缩文件
蓝色字体：目录文件
青色字体：链接文件
黄色字体：设备文件
灰色字体：其他文件
ls -a：显示隐藏文件(.开头的隐藏文件也会列出)
ls -A：显示隐藏文件，但不列出"."(目前目录)及".."(父目录)
ls -F：列出区分度，目录后加/，可执行程序后加*
ls -r：将文件以相反次序排序(原定依照英文字符排序)
ls -R：列出目录包含下的所有文件
ls -s：列出文件中的块数
ls -S：将文件按照容量大小进行排序
ls -t：将文件按照建立时间的先后次序进行排序
ls -l：显示详细资料
ls -lh：以人们可读的格式，而不是以字节数来显示文件的大小
例：ls -ltr s*：列出当前工作目录下所有名称是s开头的文件，越新的排越后面。

需要注意的是，使用"ls -r"命令是可以看到文件的大小的。但是在使用"ls-r"命令査看目录大小时，目录的大小多数是 4KB，
这是因为目录下的子目录名和子文件名是保存到父目录的 block（默认大小为 4KB）中的，
如果父目录下的子目录和子文件并不多，一个 block 就能放下，那么这个父目录就只占用了一个 block 大小。

但是我们在统计目录时，不是想看父目录下的子目录名和子文件名到底占用了多少空间，而是想看父目录下的子目录和子文件的总磁盘占用量大小，这时就需要使用 du 命令才能统计目录的真正磁盘占用量大小。
-a：显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量
-h：使用习惯单位显示磁盘占用量，如 KB、MB 或 GB 等；
-s：统计总磁盘占用量，而不列出子目录和子文件的磁盘占用量

有时我们会发现，使用 du 命令和 df 命令去统计分区的使用情况时，得到的数据是不一样的。那是因为df命令是从文件系统的角度考虑的，通过文件系统中未分配的空间来确定文件系统中已经分配的空间大小。也就是说，在使用 df 命令统计分区时，不仅要考虑文件占用的空间，还要统计被命令或程序占用的空间（最常见的就是文件已经删除，但是程序并没有释放空间）。
而 du 命令是面向文件的，只会计算文件或目录占用的磁盘空间。也就是说，df 命令统计的分区更准确，是真正的空闲空间。

groups：查看当前登录用户的组内成员
groups gliethttp：查看 gliethttp 用户所在的组，以及组内成员
whoami：查看当前登录用户名

cat：全称 concatenate，用于连接文件并打印到标准输出设备上
cat -n，--number：由 1 开始对所有输出的行数编号
cat -b，--number-nonblank：由 1 开始对所有输出的行数编号，空白行不标号
cat -s，--squeeze-blank：由 1 开始对所有输出的行数编号，遇到连续两行以上的空白行，代换为一行空白行
cat -e，--show-ends：在每行结束时使用 $ 符号
>：表示覆盖掉原文件的内容
>>：表示在原文件内容基础上追加内容
例：cat hello.cpp：显示hello.cpp文件的内容
例：cat > hello.cpp：创建hello.cpp文件
例：cat -b textfile1 textfile2 > textfile3：把前两个文档的内容加上行号(空白行不加)，附加到textfile3文档里
例：cat /dev/null > /etc/test.txt：清空/etc/test.txt文档内容
Unix 文化中的 /dev/null：
位存储桶是个古老的 Unix 概念，由于它的普遍性，它的身影出现在 Unix 文化的许多部分。
当有人说他/她正在发送你的评论到 /dev/null，现在你应该知道那是什么意思了。

less：more 命令的升级版，Linux 正统的用于查看文本文件的命令
u：上翻半页
d：下翻半页
b：上翻一页
空格：下翻一页
方向键上：上翻一行
方向键下：下翻一行
G：移动到最后一行
g：移动到开头一行
/：向下搜索指定的字符串
?：向上搜索指定的字符串
n：向后查找下一个出现的字符串，这个字符串是之前所指定查找的
N：向前查找下一个出现的字符串，这个字符串是之前所指定查找的
h：显示帮助屏幕
q：退出 less 程序

cp -a, --archive：复制文件和目录，以及它们的属性，包括所有权和权限。通常，副本具有用户所操作文件的默认属性。
cp -i, --interactive：在重写已存在文件之前，提示用户确认。如果这个选项不指定，cp 命令会默认重写文件。
cp -r, --recursive：递归地复制目录及目录中的内容。当复制目录时，需要这个选项（或者-a 选项）。
cp -v, --verbose：显示翔实的命令操作信息。
例：cp dir1/* dir2：使用一个通配符，在目录 dir1 中的所有文件都被复制到目录 dir2 中。dir2 必须已经存在。
例：cp -r dir1 dir2：复制目录 dir1 中的内容到目录 dir2。如果目录 dir2 不存在，创建目录 dir2 并复制。

mv：剪切指令

rm -i, --interactive：在删除已存在的文件前，提示用户确认信息。如果不指定这个选项，rm 会默默地删除文件。
rm -r, --recursive：递归地删除文件，这意味着，如果要删除一个目录，而此目录又包含子目录，那么子目录也会被删除。
(要删除一个目录，必须指定这个选项)。
rm -f, --force：忽视不存在的文件，不显示提示信息。这选项覆盖了 “--interactive” 选项。
rm -v, --verbose：在执行 rm 命令时，显示翔实的操作信息。
例：rm -r file1 dir1：删除文件 file1, 目录 dir1，及 dir1 中的内容。
例：rm -rf file1 dir1：同上，除了如果文件 file1，或目录 dir1 不存在的话，rm 仍会继续执行。

树莓派使用 networkmanager 连接 wifi:
sudo nmcli dev:查看网络设备列表
注意，如果列出的设备状态是 unmanaged 的，说明网络设备不受 NetworkManager 管理，需要清空 /etc/network/interfaces 下的网络设置，然后重启
sudo nmcli r wifi on:开启WiFi
sudo nmcli dev wifi:扫描附近的 WiFi 热点
sudo nmcli dev wifi connect "SSID" password "PASSWORD":连接到指定的 WiFi 热点

scp: secure copy 用于 Linux 下远程拷贝文件
scp /home/wzz/a.txt nx@10.10.10.10:/home/nx  将本机文件复制到远程服务器上
scp nx@10.10.10.10:/home/nx/a.txt /home/wzz  将远程文件复制到本地的绝对路径
scp -r nx@10.10.10.10:/home/nx /home/wzz  将远程文件夹复制到本地的绝对路径

netstat：用于显示网络相关的信息
netstat -a：显示所有选项
netstat -t：仅显示tcp
netstat -u：仅显示udp
netstat -p：显示建立相关链接的程序名
netstat -pt：可以用来查看vscode远程ssh连接虚拟机Ubuntu系统的进程PID

有趣的命令:
sl：召唤火车
xeyes：召唤眼睛
oneko：召唤小白
aafire：召唤火焰
cmatrix：召唤黑客帝国
fortune：输出古诗名句
cowsay：牛说话
cowsay -l：查看其他能说话的图案选项
cowsay -f sheep "wzz"：sheep 说话
fortune-zh | cowsay：让牛输出古诗名句
screenfetch：输出系统的属性参数
linux_logo：输出 Linux 的 logo 图与系统信息
figlet/toilet：输出艺术字
factor：分解质因数